# Auto-generated using compose2nix v0.3.1. Edited.
{
  pkgs,
  lib,
  config,
  ...
}@args:
let
  inherit (args) inputs;
in
{
  imports = [ inputs.sops-nix.nixosModules.sops ];

  # Secrets are managed via sops
  sops = {
    defaultSopsFile = ../../secrets/plex.env.enc;
    defaultSopsFormat = "dotenv";
    age.keyFile = "/home/lukas/.config/sops/age/keys.txt";
    secrets.plex-env = { };
  };

  # Create persistent directory for postgres data
  systemd.tmpfiles.rules = [
    "d /srv/plex/config 0750 docker docker -"
    "d /srv/plex/transcode 0750 docker docker -"
  ];

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."plex-server" = {
    image = "plexinc/pms-docker";
    environment = {
      "PLEX_CLAIM" = "<claimToken>";
      "TZ" = "Europe/Berlin";
    };
    environmentFiles = [ config.sops.secrets.plex-env.path ];
    volumes = [
      "/data/movies:/data/movies:rw"
      "/data/music:/data/music:rw"
      "/srv/plex/config:/config:rw"
      "/srv/plex/transcode:/transcode:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/dri:/dev/dri:rwm"
      "--network=host"
    ];
  };
  systemd.services."docker-plex-server" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    partOf = [
      "docker-compose-plex-server-root.target"
    ];
    wantedBy = [
      "docker-compose-plex-server-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-plex-server-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
