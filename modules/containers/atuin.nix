# _█████╗ ████████╗██╗   ██╗██╗███╗   ██╗    ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗
# ██╔══██╗╚══██╔══╝██║   ██║██║████╗  ██║    ██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗
# ███████║   ██║   ██║   ██║██║██╔██╗ ██║    ███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝
# ██╔══██║   ██║   ██║   ██║██║██║╚██╗██║    ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗
# ██║  ██║   ██║   ╚██████╔╝██║██║ ╚████║    ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║
# ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝╚═╝  ╚═══╝    ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝
# ════════════════════════════════════════════════════════════════════════════════════════════
# This module was auto-generated using compose2nix v0.3.2-pre and then edited
#  by hand. Atuin is a shell history database with advanced search features.
#  More information under https://docs.atuin.sh/self-hosting/docker.

{ pkgs, lib, config, ... }@args:
let inherit (args) inputs;
in {
  imports = [
    # The docker user:
    ../../users/docker.nix
    # Any other modules:
    inputs.sops-nix.nixosModules.sops
  ];

  # Secrets are managed via sops
  sops = {
    # defaultSopsFile = ../../secrets/atuin.env.enc;
    # defaultSopsFormat = "dotenv";
    # age.keyFile = "/home/lukas/.config/sops/age/keys.txt";
    secrets.atuin-env = {
      sopsFile = ../../secrets/atuin.env.enc;
      format = "dotenv";
    };
  };

  # Create persistent directory for postgres data
  systemd.tmpfiles.rules = [
    "d /srv/atuin/database 0750 docker docker -"
    "d /srv/atuin/config 0750 docker docker -"
  ];

  # # Runtime
  # virtualisation.docker = {
  #   enable = true;
  #   autoPrune.enable = true;
  # };
  # virtualisation.oci-containers.backend = "docker";

  # Define the containers
  virtualisation.oci-containers.containers."atuin-server" = {
    image = "ghcr.io/atuinsh/atuin:latest";
    environment = {
      "ATUIN_HOST" = "0.0.0.0";
      "ATUIN_OPEN_REGISTRATION" = "true";
      "RUST_LOG" = "info,atuin_server=debug";
    };
    environmentFiles = [ config.sops.secrets.atuin-env.path ];
    volumes = [ "/srv/atuin/config:/config:rw" ];
    ports = [ "8888:8888/tcp" ];
    cmd = [ "server" "start" ];
    dependsOn = [ "atuin-server-postgresql" ];
    log-driver = "journald";
    extraOptions = [ "--network-alias=atuin" "--network=atuin-server_default" ];
    user = "990:131";
  };
  systemd.services."docker-atuin-server" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [ "docker-network-atuin-server_default.service" ];
    requires = [ "docker-network-atuin-server_default.service" ];
    partOf = [ "docker-compose-atuin-server-root.target" ];
    wantedBy = [ "docker-compose-atuin-server-root.target" ];
  };

  virtualisation.oci-containers.containers."atuin-server-postgresql" = {
    image = "postgres:14";
    environment = { };
    volumes = [ "/srv/atuin/database:/var/lib/postgresql/data:rw" ];
    log-driver = "journald";
    extraOptions =
      [ "--network-alias=postgresql" "--network=atuin-server_default" ];
    environmentFiles = [ config.sops.secrets.atuin-env.path ];
    user = "990:131";
  };
  systemd.services."docker-atuin-server-postgresql" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [ "docker-network-atuin-server_default.service" ];
    requires = [ "docker-network-atuin-server_default.service" ];
    partOf = [ "docker-compose-atuin-server-root.target" ];
    wantedBy = [ "docker-compose-atuin-server-root.target" ];
  };

  # Networks
  systemd.services."docker-network-atuin-server_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f atuin-server_default";
    };
    script = ''
      docker network inspect atuin-server_default || docker network create atuin-server_default
    '';
    partOf = [ "docker-compose-atuin-server-root.target" ];
    wantedBy = [ "docker-compose-atuin-server-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-atuin-server-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
