# ███████╗██████╗ ███████╗███████╗██╗  ██╗    ██████╗ ███████╗███████╗
# ██╔════╝██╔══██╗██╔════╝██╔════╝██║  ██║    ██╔══██╗██╔════╝██╔════╝
# █████╗  ██████╔╝█████╗  ███████╗███████║    ██████╔╝███████╗███████╗
# ██╔══╝  ██╔══██╗██╔══╝  ╚════██║██╔══██║    ██╔══██╗╚════██║╚════██║
# ██║     ██║  ██║███████╗███████║██║  ██║    ██║  ██║███████║███████║
# ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚══════╝
# ════════════════════════════════════════════════════════════════════
# This module was auto-generated using compose2nix v0.3.1 and then
#  edited by hand. FreshRSS is a RSS feed aggregator. More information
#  under https://github.com/linuxserver/docker-freshrss.

{ pkgs, lib, config, ... }@args:
let inherit (args) inputs;
in {
  imports = [
    # The docker user:
    ../../users/docker.nix
    # Any other modules:
    inputs.sops-nix.nixosModules.sops
  ];

  # Secrets are managed via sops
  sops = {
    secrets.freshrss-env = {
      sopsFile = ../../secrets/freshrss.env.enc;
      format = "dotenv";
    };
  };

  # Create persistent directory for container data
  systemd.tmpfiles.rules = [
    "d /srv/freshrss/database 0750 docker docker -"
    "d /srv/freshrss/config 0750 docker docker -"
  ];

  # Containers
  virtualisation.oci-containers.containers."freshrss" = {
    image = "freshrss/freshrss:latest";
    environment = {
      "CRON_MIN" = "3,33";
      "TZ" = "Europe/Berlin";
    };
    environmentFiles = [ config.sops.secrets.freshrss-env.path ];
    volumes = [
      "/srv/freshrss/data:/var/www/FreshRSS/data:rw"
      "/srv/freshrss/extensions:/var/www/FreshRSS/extensions:rw"
    ];
    ports = [ "8008:80/tcp" ];
    extraOptions = [
      "--hostname=freshrss"
      #      "--log-opt=max-size=10m"
      "--network-alias=freshrss"
      "--network=freshrss_default"
    ];
  };
  systemd.services."docker-freshrss" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [ "docker-network-freshrss_default.service" ];
    requires = [ "docker-network-freshrss_default.service" ];
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  # Networks
  systemd.services."docker-network-freshrss_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f freshrss_default";
    };
    script = ''
      docker network inspect freshrss_default || docker network create freshrss_default
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  networking.firewall.allowedTCPPorts = [ 8008 ];

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-freshrss-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
